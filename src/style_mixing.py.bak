# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# NVIDIA CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA CORPORATION is strictly prohibited.

"""Generate style mixing image matrix using pretrained network pickle."""

import os
import re
from typing import List

import click
import numpy as np
import torch
import torch.nn.functional as F

import dnnlib
import legacy
from hair import HairRoots, save_hair
from utils.image import write_texture
from utils.misc import copy2cpu as c2c
from utils.misc import filename, load_tensor_dict

# ----------------------------------------------------------------------------


def num_range(s: str) -> List[int]:
    '''Accept either a comma separated list of numbers 'a,b,c' or a range 'a-c' and return as a list of ints.'''

    range_re = re.compile(r'^(\d+)-(\d+)$')
    m = range_re.match(s)
    if m:
        return list(range(int(m.group(1)), int(m.group(2)) + 1))
    vals = s.split(',')
    return [int(x) for x in vals]

# ----------------------------------------------------------------------------


def parse_comma_separated_list(s):
    if isinstance(s, list):
        return s
    if s is None or s.lower() == 'none' or s == '':
        return []
    return s.split(',')


# ----------------------------------------------------------------------------


@click.command()
@click.option('--network', 'network_pkl', help='Network pickle filename', required=True)
@click.option('--low_rank', help='Where to load the low-rank part of hair neural textures', required=True, metavar='DIR')
@click.option('--high_rank', help='Where to load the high-rank part of hair neural textures', required=True, metavar='DIR')
@click.option('--outdir', help='Where to save the output images', required=True, metavar='DIR')
@click.option('--head_mesh', help='Head mesh to place hair models', metavar='DIR', type=str)
@click.option('--scalp_bounds', help='Bounding box of the scalp area', metavar='[NAME|A,B,C|none]', type=parse_comma_separated_list, default=[0.1870, 0.8018, 0.4011, 0.8047], show_default=True)
def generate_style_mix(
    network_pkl: str,
    low_rank: str,
    high_rank: str,
    outdir: str,
    head_mesh: str,
    scalp_bounds: List[float]
):
    """Generate images using pretrained network pickle.

    Examples:

    \b
    python style_mixing.py --outdir=out --rows=85,100,75,458,1500 --cols=55,821,1789,293 \\
        --network=https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/metfaces.pkl
    """
    print('Loading networks from "%s"...' % network_pkl)
    device = torch.device('cuda')
    with dnnlib.util.open_url(network_pkl) as f:
        G = legacy.load_network_pkl(f)['G'].to(device)  # type: ignore

    os.makedirs(outdir, exist_ok=True)

    hair_roots = HairRoots(head_mesh=head_mesh, scalp_bounds=scalp_bounds)

    # Load hair neural textures.
    low_rank_data = load_tensor_dict(low_rank, device=device)
    image_raw = low_rank_data['texture'].unsqueeze(0)
    image_raw = image_raw[:, :G.raw_channels]
    roots = low_rank_data['roots'].unsqueeze(0)
    coords = hair_roots.rescale(roots[..., :2])

    high_rank_data = load_tensor_dict(high_rank, device=device)
    if 'w' in high_rank_data:
        ws = high_rank_data['w'].unsqueeze(0)
        print(ws.shape)
    else:
        ws = None
        image_res = high_rank_data['texture'].unsqueeze(0)
        image_res = image_res[:, G.raw_channels:]
        image_mask = high_rank_data['mask'].unsqueeze(0)
        img = {'image': image_res, 'image_mask': image_mask}

    print('Generating style-mixed results...')
    if ws is None:
        _, ws, _ = G.encode(img)
    img = G.synthesis(ws=ws, noise_mode='const')
    image = torch.cat([image_raw, img['image']], dim=1)
    strands = G.sample(image, coords, mode='nearest')
    strands.position = strands.position + hair_roots.spherical_to_cartesian(roots).unsqueeze(2)
    save_hair(os.path.join(outdir, f'{filename(low_rank)}-{filename(high_rank)}.data'), c2c(strands.position[0]))


# ----------------------------------------------------------------------------
if __name__ == "__main__":
    generate_style_mix()  # pylint: disable=no-value-for-parameter

# ----------------------------------------------------------------------------
